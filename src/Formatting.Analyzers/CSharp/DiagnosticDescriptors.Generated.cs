// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;

namespace Roslynator.Formatting.CSharp
{
    public static partial class DiagnosticDescriptors
    {
        /// <summary>ROS0001</summary>
        public static readonly DiagnosticDescriptor RemoveNewlinesFromAccessorListOfAutoProperty = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveNewlinesFromAccessorListOfAutoProperty, 
            title:              "Remove newlines from accessor list of auto-property.", 
            messageFormat:      "Remove newlines from accessor list of auto-property.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveNewlinesFromAccessorListOfAutoProperty}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS0002</summary>
        public static readonly DiagnosticDescriptor AddNewlinesToAccessorListOfFullProperty = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlinesToAccessorListOfFullProperty, 
            title:              "Add newlines to accessor list of full property.", 
            messageFormat:      "Add newlines to accessor list of full property.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlinesToAccessorListOfFullProperty}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS0003</summary>
        public static readonly DiagnosticDescriptor RemoveNewlinesFromAccessor = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.RemoveNewlinesFromAccessor, 
            title:              "Remove newlines from accessor with single-line expression.", 
            messageFormat:      "Remove newlines from accessor with single-line expression.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.RemoveNewlinesFromAccessor}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1023</summary>
        public static readonly DiagnosticDescriptor AddNewlineToEmptyBlock = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlineToEmptyBlock, 
            title:              "Add newline to empty block.", 
            messageFormat:      "Add newline to empty block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlineToEmptyBlock}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1025</summary>
        public static readonly DiagnosticDescriptor AddNewlineBeforeEnumMember = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlineBeforeEnumMember, 
            title:              "Add newline before enum member.", 
            messageFormat:      "Add newline before enum member.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlineBeforeEnumMember}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1026</summary>
        public static readonly DiagnosticDescriptor AddNewlineBeforeStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlineBeforeStatement, 
            title:              "Add newline before statement.", 
            messageFormat:      "Add newline before statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlineBeforeStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1027</summary>
        public static readonly DiagnosticDescriptor AddNewlineBeforeEmbeddedStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlineBeforeEmbeddedStatement, 
            title:              "Add newline before embedded statement.", 
            messageFormat:      "Add newline before embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlineBeforeEmbeddedStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1028</summary>
        public static readonly DiagnosticDescriptor AddNewlineAfterSwitchLabel = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlineAfterSwitchLabel, 
            title:              "Add newline after switch label.", 
            messageFormat:      "Add newline after switch label.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlineAfterSwitchLabel}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1029</summary>
        public static readonly DiagnosticDescriptor PlaceBinaryOperatorBeforeOperand = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.PlaceBinaryOperatorBeforeOperand, 
            title:              "Place operator before operand.", 
            messageFormat:      "Place operator before operand.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.PlaceBinaryOperatorBeforeOperand}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1030</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterEmbeddedStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement, 
            title:              "Add empty line after embedded statement.", 
            messageFormat:      "Add empty line after embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1057</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenDeclarations = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations, 
            title:              "Add empty line between declarations.", 
            messageFormat:      "Add empty line between declarations.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1076</summary>
        public static readonly DiagnosticDescriptor AddNewlineToEmptyTypeDeclaration = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlineToEmptyTypeDeclaration, 
            title:              "Add newline to empty type declaration.", 
            messageFormat:      "Add newline to empty type declaration.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlineToEmptyTypeDeclaration}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1086</summary>
        public static readonly DiagnosticDescriptor UseLinefeedAsNewline = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.UseLinefeedAsNewline, 
            title:              "Use linefeed as newline.", 
            messageFormat:      "Use linefeed as newline.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.UseLinefeedAsNewline}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1087</summary>
        public static readonly DiagnosticDescriptor UseCarriageReturnAndLinefeedAsNewline = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewline, 
            title:              "Use carriage return + linefeed as newline.", 
            messageFormat:      "Use carriage return + linefeed as newline.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewline}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1088</summary>
        public static readonly DiagnosticDescriptor UseSpacesInsteadOfTab = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.UseSpacesInsteadOfTab, 
            title:              "Use spaces instead of tab.", 
            messageFormat:      "Use spaces instead of tab.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.UseSpacesInsteadOfTab}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1092</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeClosingBraceOfDoStatement = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeClosingBraceOfDoStatement, 
            title:              "Add empty line before closing brace of 'do' statement.", 
            messageFormat:      "Add empty line before closing brace of 'do' statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineBeforeClosingBraceOfDoStatement}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1153</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterClosingBraceOfBlock = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterClosingBraceOfBlock, 
            title:              "Add empty line after closing brace of block.", 
            messageFormat:      "Add empty line after closing brace of block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddEmptyLineAfterClosingBraceOfBlock}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1184</summary>
        public static readonly DiagnosticDescriptor PlaceConditionalOperatorBeforeExpression = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.PlaceConditionalOperatorBeforeExpression, 
            title:              "Place conditional operator before expression.", 
            messageFormat:      "Place conditional operator before expression.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.PlaceConditionalOperatorBeforeExpression}", 
            customTags:         Array.Empty<string>());

        /// <summary>ROS1185</summary>
        public static readonly DiagnosticDescriptor AddNewlinesToBlock = new DiagnosticDescriptor(
            id:                 DiagnosticIdentifiers.AddNewlinesToBlock, 
            title:              "Add newlines to block.", 
            messageFormat:      "Add newlines to block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        $"{HelpLinkUriRoot}{DiagnosticIdentifiers.AddNewlinesToBlock}", 
            customTags:         Array.Empty<string>());

    }
}