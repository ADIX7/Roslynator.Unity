<?xml version="1.0" encoding="utf-8"?>
<Analyzers>
  <Analyzer Identifier="ImplementNonGenericCounterpart" IsDevelopment="true">
    <Id>RCS1238</Id>
    <Title>Implement non-generic counterpart.</Title>
    <MessageFormat>Implement {0} when implementing {0}&lt;T&gt;.</MessageFormat>
    <Category>Design</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Summary></Summary>
    <Samples>
      <Sample>
        <Before><![CDATA[using System;
using System.Collections.Generic;

public class C
{
}

public abstract class Comparable : IComparable<C> [|Id|]
{
    public abstract int CompareTo(C other);
}]]></Before>
        <After><![CDATA[using System;
using System.Collections.Generic;

public class C
{
}

public abstract class Comparable : IComparable<C>, IComparable
{
    public abstract int CompareTo(C other);

    public int CompareTo(object obj)
    {
        if (obj == null)
        {
            return 1;
        }

        if (obj is C x)
        {
            return CompareTo(x);
        }

        throw new ArgumentException($""An argument must be '{nameof(C)}'."", nameof(obj));
    }
}]]></After>
      </Sample>
      <Sample>
        <Before><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;

public class C
{
}

public abstract class Comparer : IComparer<C> [|Id|]
{
    public abstract int Compare(C x, C y);
}]]></Before>
        <After><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;

public class C
{
}

public abstract class Comparer : IComparer<C>, IComparer
{
    public abstract int Compare(C x, C y);

    public int Compare(object x, object y)
    {
        if (x == y)
        {
            return 0;
        }

        if (x == null)
        {
            return -1;
        }

        if (y == null)
        {
            return 1;
        }

        if (x is global::C a
            && y is global::C b)
        {
            return Compare(a, b);
        }

        if (x is IComparable ic)
        {
            return ic.CompareTo(y);
        }

        throw new ArgumentException(""An object must implement IComparable."", nameof(x));
    }
}]]></After>
      </Sample>
      <Sample>
        <Before><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;

public class C
{
}

public abstract class EqualityComparer : IEqualityComparer<C> [|Id|]
{
    public abstract bool Equals(C x, C y);

    public abstract int GetHashCode(C obj);
}]]></Before>
        <After><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;

public class C
{
}

public abstract class EqualityComparer : IEqualityComparer<C>, IEqualityComparer
{
    public abstract bool Equals(C x, C y);

    public abstract int GetHashCode(C obj);

    new public bool Equals(object x, object y)
    {
        if (x == y)
        {
            return true;
        }

        if (x == null || y == null)
        {
            return false;
        }

        if (x is global::C a
            && y is global::C b)
        {
            return Equals(a, b);
        }

        return x.Equals(y);
    }

    public int GetHashCode(object obj)
    {
        if (obj == null)
        {
            throw new ArgumentNullException(nameof(obj));
        }

        if (obj is C x)
        {
            return GetHashCode(x);
        }

        return obj.GetHashCode();
    }
}]]></After>
      </Sample>
    </Samples>
    <Remarks>Publicly visible type that implements IComparable&lt;T&gt;, IComparer&lt;T&gt; or IEqualityComparer&lt;T&gt; should implement their non-generic counterpart.</Remarks>
    <Links>
      <Link>
        <Url></Url>
        <Text></Text>
      </Link>
    </Links>
  </Analyzer>
</Analyzers>