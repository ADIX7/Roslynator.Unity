<?xml version="1.0" encoding="utf-8"?>
<Analyzers>
  <Analyzer Identifier="UsePropertySyntaxNodeSpanStart">
    <Id>ROS0001</Id>
    <Title>Use property SyntaxNode.SpanStart.</Title>
    <MessageFormat>Use property SyntaxNode.SpanStart.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[node.Span.Start // [|Id|]]]></Before>
        <After><![CDATA[node.SpanStart]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="UsePropertySyntaxNodeRawKind">
    <Id>ROS0002</Id>
    <Title>Use property SyntaxNode.RawKind.</Title>
    <MessageFormat>Use property SyntaxNode.RawKind.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[node1.Kind() == node2.Kind() // [|Id|]]]></Before>
        <After><![CDATA[node1.RawKind == node2.RawKind]]></After>
      </Sample>
      <Sample>
        <Before><![CDATA[node1.IsKind(node2.Kind()) // [|Id|]]]></Before>
        <After><![CDATA[node1?.RawKind == node2.RawKind]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="RedundantConditionalAccess">
    <Id>ROS0003</Id>
    <Title>Redundant conditional access.</Title>
    <MessageFormat>Redundant conditional access.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>true</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>true</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[node?.IsKind(kind) == true // [|Id|]]]></Before>
        <After><![CDATA[node.IsKind(kind)]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="UsePatternMatching">
    <Id>ROS0004</Id>
    <Title>Use pattern matching.</Title>
    <MessageFormat>Use pattern matching.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Hidden</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[]]></Before>
        <After><![CDATA[]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="CallAnyInsteadOfUsingCount">
    <Id>ROS0005</Id>
    <Title>Call 'Any' instead of using 'Count'.</Title>
    <MessageFormat>Call 'Any' instead of using 'Count'.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[syntaxList.Count == 0 // [|Id|]]]></Before>
        <After><![CDATA[!syntaxList.Any()]]></After>
      </Sample>
    </Samples>
    <Remarks>This analyzer is applicable for following types:
* `Microsoft.CodeAnalysis.ChildSyntaxList`
* `Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxNodeOrTokenList`
* `Microsoft.CodeAnalysis.SyntaxTokenList`
* `Microsoft.CodeAnalysis.SyntaxTriviaList`</Remarks>
  </Analyzer>
  <Analyzer Identifier="UnnecessaryNullCheck">
    <Id>ROS0006</Id>
    <Title>Unnecessary null check.</Title>
    <MessageFormat>Unnecessary null check.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>true</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[syntaxNode != null && syntaxNode.IsKind(kind) // [|Id|]]]></Before>
        <After><![CDATA[syntaxNode.IsKind(kind)]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="UseElementAccess">
    <Id>ROS0007</Id>
    <Title>Use element access.</Title>
    <MessageFormat>Use element access.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[syntaxList.First() // [|Id|]]]></Before>
        <After><![CDATA[syntaxList[0]]]></After>
      </Sample>
    </Samples>
    <Remarks>This analyzer is applicable for following types:
* `Microsoft.CodeAnalysis.ChildSyntaxList`
* `Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxNodeOrTokenList`
* `Microsoft.CodeAnalysis.SyntaxTokenList`
* `Microsoft.CodeAnalysis.SyntaxTriviaList`</Remarks>
  </Analyzer>
  <Analyzer Identifier="UseReturnValue">
    <Id>ROS0008</Id>
    <Title>Use return value.</Title>
    <MessageFormat>Use return value.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Warning</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[ifStatement.WithCondition(newCondition); // [|Id|]]]></Before>
      </Sample>
    </Samples>
  </Analyzer>
</Analyzers>